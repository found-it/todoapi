####
#
# Azure Pipeline for Todo API Server
#
# Displays usage of the Anchore integration with Azure DevOps
#
#####

trigger:
- master
- dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  - name: acrProdServiceConnection
    value: demoProduction
  - name: prodRegistry
    value: 'anchoredemo.azurecr.io'

  - name: acrStagingServiceConnection
    value: demoStaging
  - name: stagingRegistry
    value: 'demostaging.azurecr.io'

  - name: imageRepository
    value: 'todoapi'
  - name: dockerfilePath
    value: 'Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: prodImage
    value: '$(prodRegistry)/$(imageRepository)'

  - name: stagedImage
    value: '$(stagingRegistry)/$(imageRepository)'

  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'

  # Anchore stuff
  - name: anchoreUser
    value: 'admin'
  - name: anchoreUrl
    value: 'http://23.100.36.77/v1/'
  - group: AnchoreCredentials
    # anchorepass ^

###########################################################

stages:

#
# Stage 1 - Staging
#
- stage: Staging
  displayName: Build and push to staging registry
  jobs:
  - job: Staging
    displayName: Staging
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrStagingServiceConnection)
        tags: |
          $(tag)

#
# Stage 2 - Scanning
#
- stage: Scan1
  displayName: Scan the staged image
  dependsOn: Staging
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install --upgrade anchorecli
        echo "##vso[task.prependpath]$(HOME)/.local/bin"
      displayName: Install tools for Anchore CLI

    - task: AnchoreEnterprise@0
      inputs:
        image: '$(stagedImage):task'
        url: $(anchoreUrl)
        username: $(anchoreUser)
        password: $(anchorepass)
        dockerfile: Dockerfile

#
# Stage 3 - Scanning
#
- stage: Scan2
  displayName: Scan the staged image
  dependsOn: Staging
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install --upgrade anchorecli
        echo "##vso[task.prependpath]$(HOME)/.local/bin"
      displayName: Install tools for Anchore CLI

    - script: |
        anchore-cli image add '$(stagedImage):anchorecli' --dockerfile=Dockerfile
        anchore-cli image wait '$(stagedImage):anchorecli'
        anchore-cli evaluate check '(stagedImage):anchorecli'
      displayName: Scan using anchore-cli

#
# Stage 4 - Scanning
#
- stage: Scan3
  displayName: Scan the staged image
  dependsOn: Staging
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        DOCKER_BUILDKIT=1 docker build -t $(imageRepository):inlinescan .
      displayName: Build the local image

    - script: |
        docker image ls
        curl -s https://ci-tools.anchore.io/inline_scan-v0.7.0 | bash -s -- \
          analyze \
          -u $(anchore_user) \
          -p $(anchorepass) \
          -r $(anchore_url) \
          -f ./Dockerfile \
          -g $(imageRepository):inlinescan
      displayName: Scan image and send to engine

    - script: |
        python -m pip install --upgrade pip setuptools wheel
        pip install --upgrade anchorecli
        echo "##vso[task.prependpath]${PATH}:/home/vsts/.local/bin"
      displayName: Configure anchore-cli

    - script: |
        anchore-cli \
          --u $(anchore_user) \
          --p $(anchorepass) \
          --url $(anchore_url) \
          evaluate check localbuild/$(imageRepository):inlinescan
      displayName: Evaluate the image

#
# Stage 3 - Production
#
- stage: Production
  displayName: Push to production registry
  dependsOn: Scan
  jobs:
  - job: Production
    displayName: Production
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrProdServiceConnection)
        tags: |
          $(tag)
